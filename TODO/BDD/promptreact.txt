CrÃ©e un service React pour rÃ©cupÃ©rer les dÃ©partements Ã  partir dâ€™une API, en suivant lâ€™exemple de code ci-dessous.
Le service doit utiliser @tanstack/react-query pour la gestion des requÃªtes et axios pour les appels HTTP.
Assure-toi de respecter les bonnes pratiques suivantes :

DÃ©finir une clÃ© de requÃªte constante (queryKey)

Typage strict avec TypeScript pour la rÃ©ponse de lâ€™API

Utiliser la variable dâ€™environnement BASE_URL provenant de config/apiConfig

GÃ©rer correctement les erreurs et le typage du rÃ©sultat

Voici un exemple Ã  suivre :

import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import { BASE_URL } from 'config/apiConfig';

const DEPARTMENTS_KEY = ['departments'] as const;

interface DepartmentsResponse {
  status: string;
  data: string[];
}

export const useDepartments = () => {
  return useQuery<DepartmentsResponse, Error>({
    queryKey: DEPARTMENTS_KEY,
    queryFn: async () => {
      const response = await axios.get(`${BASE_URL}/api/User/departments`, {
        headers: {
          accept: '*/*',
        },
      });
      return response.data;
    },
  });
};


Lâ€™API appelÃ©e est :

curl -X 'GET' \
  'http://localhost:5183/api/User' \
  -H 'accept: text/plain'

Et la rÃ©ponse JSON est :

{
  "status": "success",
  "data": [
    {
      "userId": "000465d0-0530-41d9-872f-d6012418ba7e",
      "name": "Safidy RAKOTONDRAJOA (DSI)",
      "email": "safidy.rakotondrajoa@ravinala-airports.aero",
      "matricule": "00298",
      "department": "DSI",
      "position": "Responsable des applications IT",
      "superiorId": "83dc05fd-0e42-43f5-b0e0-1567df7647b1",
      "superiorName": "Vonjimampianina RAKOTOARISOA (DSI)"
    }
  ]
}


ðŸŽ¯ Objectif final :
CrÃ©er un hook qui renvoie les donnÃ©es de cette API en respectant la structure et les conventions de React Query et Axios.